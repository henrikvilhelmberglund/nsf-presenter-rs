import { Button, ComboBox, CheckBox, SpinBox, LineEdit, VerticalBox } from "std-widgets.slint";
import { ModuleMetadata, ModuleMetadataView } from "./module-metadata.slint";
import { ChannelConfigView, ChannelConfig } from "./channel-config.slint";
import { ColorUtils } from "./color-picker.slint";
export { ColorUtils }

export component MainWindow inherits Window {
    callback browse-for-module();
    callback browse-for-background();
    callback import-config();
    callback export-config();
    callback reset-config();
    callback update-formatted-duration();
    callback update-channel-configs(bool);
    callback start-render();
    callback cancel-render();

    in property <string> module-path: "";
    in-out property <string> background-path: "";
    in-out property <int> selected-track-index: -1;
    in-out property <string> selected-track-text: "Select a track...";
    in-out property <string> track-duration-num: "300";
    in-out property <string> track-duration-type: "seconds";
    in property <string> track-duration-formatted: "<unknown>";
    in-out property <int> fadeout-duration: 180;
    in-out property <int> output-width: 1920;
    in-out property <int> output-height: 1080;
    in-out property <bool> famicom-mode: false;
    in-out property <bool> hq-filtering: true;
    in-out property <bool> multiplexing: false;
    in property <ModuleMetadata> module-metadata: {
        title: "<?>",
        artist: "<?>",
        copyright: "<?>",
        driver: "<?>",
        extended-metadata: false,
        loop-detection: false,
        extended-durations: [],
        chips: [],
        tracks: []
    };

    in-out property<[ChannelConfig]> config-2a03: [
        { name: "Pulse 1", hidden: false, colors: [] },
        { name: "Pulse 2", hidden: false, colors: [] },
        { name: "Triangle", hidden: false, colors: [] },
        { name: "Noise", hidden: false, colors: [] },
        { name: "DMC", hidden: false, colors: [] }
    ];
    in-out property<[ChannelConfig]> config-mmc5: [
        { name: "Pulse 1", hidden: false, colors: [] },
        { name: "Pulse 2", hidden: false, colors: [] },
        { name: "PCM", hidden: false, colors: [] }
    ];
    in-out property<[ChannelConfig]> config-n163: [
        { name: "NAMCO 1", hidden: false, colors: [] },
        { name: "NAMCO 2", hidden: false, colors: [] },
        { name: "NAMCO 3", hidden: false, colors: [] },
        { name: "NAMCO 4", hidden: false, colors: [] },
        { name: "NAMCO 5", hidden: false, colors: [] },
        { name: "NAMCO 6", hidden: false, colors: [] },
        { name: "NAMCO 7", hidden: false, colors: [] },
        { name: "NAMCO 8", hidden: false, colors: [] }
    ];
    in-out property<[ChannelConfig]> config-vrc6: [
        { name: "Pulse 1", hidden: false, colors: [] },
        { name: "Pulse 2", hidden: false, colors: [] },
        { name: "Sawtooth", hidden: false, colors: [] }
    ];
    in-out property<[ChannelConfig]> config-vrc7: [
        { name: "FM 1", hidden: false, colors: [] },
        { name: "FM 2", hidden: false, colors: [] },
        { name: "FM 3", hidden: false, colors: [] },
        { name: "FM 4", hidden: false, colors: [] },
        { name: "FM 5", hidden: false, colors: [] },
        { name: "FM 6", hidden: false, colors: [] }
    ];
    in-out property<[ChannelConfig]> config-s5b: [
        { name: "A", hidden: false, colors: [] },
        { name: "B", hidden: false, colors: [] },
        { name: "C", hidden: false, colors: [] }
    ];
    in-out property<[ChannelConfig]> config-fds: [
        { name: "Wavetable", hidden: false, colors: [] }
    ];
    in-out property<[ChannelConfig]> config-apu: [
        { name: "Final Mix", hidden: false, colors: [] }
    ];

    in property <bool> rendering: false;
    in property <float> progress: 0.0;
    in property <string> progress-title: "Idle";
    in property <string> progress-status: "";
    in property <bool> progress-error: false;

    title: "NSFPresenter";
    icon: @image-url("nsf-presenter-icon.png");

    VerticalBox {
        alignment: start;
        spacing: 12px;
        Text {
            text: "NSFPresenter";
            font-size: 32px;
            horizontal-alignment: center;
        }
        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Input module:";
                vertical-alignment: center;
            }
            LineEdit {
                enabled: false;
                text: module-path;
                placeholder-text: "No module selected";
            }
            Button {
                text: "Browse...";
                enabled: !rendering;
                clicked => {
                    root.browse-for-module();
                }
            }
        }
        ModuleMetadataView {
            module-metadata: module-metadata;
        }
        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Track:";
                vertical-alignment: center;
            }
            ComboBox {
                model: module-metadata.tracks;
                current-index <=> selected-track-index;
                current-value <=> selected-track-text;
                enabled: !rendering;
                selected => {
                    root.update-formatted-duration();
                }
            }
        }

        HorizontalLayout {
            alignment: end;
            spacing: 8px;
            Text {
                text: "Configuration:";
                vertical-alignment: center;
            }
            Button {
                text: "Import...";
                clicked => {
                    root.import-config();
                }
            }
            Button {
                text: "Export...";
                clicked => {
                    root.export-config();
                }
            }
            Button {
                text: "Reset";
                clicked => {
                    root.reset-config();
                }
            }
        }

        ChannelConfigView {
            active-chips: module-metadata.chips;
            enabled: !rendering;
            config-2a03 <=> root.config-2a03;
            config-mmc5 <=> root.config-mmc5;
            config-n163 <=> root.config-n163;
            config-vrc6 <=> root.config-vrc6;
            config-vrc7 <=> root.config-vrc7;
            config-s5b <=> root.config-s5b;
            config-fds <=> root.config-fds;
            config-apu <=> root.config-apu;
        }
        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Background:";
                vertical-alignment: center;
            }
            LineEdit {
                enabled: false;
                text: background-path;
                placeholder-text: "No background selected";
            }
            Button {
                text: "Browse...";
                enabled: !rendering;
                clicked => {
                    root.browse-for-background();
                }
            }
            Button {
                text: "Clear";
                enabled: !rendering;
                clicked => {
                    root.background-path = "";
                }
            }
        }
        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Render duration:";
                vertical-alignment: center;
            }
            if track-duration-type != "NSFe/NSF2 duration" : LineEdit {
                text <=> track-duration-num;
                enabled: !rendering;
                edited => {
                    root.update-formatted-duration();
                }
            }
            ComboBox {
                model: module-metadata.loop-detection
                    ? (
                        module-metadata.extended-durations.length > 0
                            ? ["seconds", "frames", "loops", "NSFe/NSF2 duration"]
                            : ["seconds", "frames", "loops"]
                    )
                    : (
                        module-metadata.extended-durations.length > 0
                            ? ["seconds", "frames", "NSFe/NSF2 duration"]
                            : ["seconds", "frames"]
                    );
                current-value <=> track-duration-type;
                enabled: !rendering;
                selected => {
                    root.update-formatted-duration();
                }
            }
            Text {
                text: track-duration-formatted;
                vertical-alignment: center;
                color: track-duration-formatted == "<error>"
                    ? red
                    : white;
            }
        }
        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Fadeout frames:";
                vertical-alignment: center;
            }
            SpinBox {
                value <=> fadeout-duration;
                minimum: 0;
                maximum: 1200;
                enabled: !rendering;
            }
        }
        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Output video size:";
                vertical-alignment: center;
            }
            SpinBox {
                value <=> output-width;
                minimum: 960;
                maximum: 7680;
                enabled: !rendering;
            }
            Text {
                text: "Ã—";
                vertical-alignment: center;
            }
            SpinBox {
                value <=> output-height;
                minimum: 540;
                maximum: 4320;
                enabled: !rendering;
            }
            Button {
                text: "1080p";
                enabled: !rendering;
                clicked => {
                    output-width = 1920;
                    output-height = 1080;
                }
            }
            Button {
                text: "4K";
                enabled: !rendering;
                clicked => {
                    output-width = 3840;
                    output-height = 2160;
                }
            }
        }
        HorizontalLayout {
            alignment: start;
            spacing: 8px;
            CheckBox {
                text: "Famicom mode";
                checked <=> famicom-mode;
                enabled: !rendering;
            }
            CheckBox {
                text: "High-quality filtering";
                checked <=> hq-filtering;
                enabled: !rendering;
            }
            CheckBox {
                text: "Emulate multiplexing";
                checked <=> multiplexing;
                enabled: !rendering;
            }
        }
        HorizontalLayout {
            alignment: center;
            Button {
                text: rendering
                    ? "Cancel"
                    : "Render!";
                primary: !rendering;
                clicked => {
                    if (rendering) {
                        root.cancel-render();
                    } else {
                        root.start-render();
                    }
                }
            }
        }

        VerticalBox {
            alignment: start;
            spacing: 8px;

            Text {
                text: root.progress-title;
                font-size: 16px;
            }
            Rectangle {
                height: 6px;

                border-width: 1px;
                border-radius: 3px;
                border-color: #313131;  // Palette.neutralLighter
                background: #313131;  // Palette.neutralLighter

                Rectangle {
                    x: 0;
                    y: 0;
                    height: parent.height;
                    width: Math.max(0.0, Math.min(root.progress, 1.0)) * parent.width;

                    border-width: 1px;
                    border-radius: 3px;
                    border-color: root.progress-error ? #bc2f32 : #60cdff;  // Palette.themePrimary
                    background: root.progress-error ? #bc2f32 : #60cdff;  // Palette.themePrimary

                    animate width {
                        duration: 100ms;
                        easing: ease-in-out;
                    }
                }
            }
            HorizontalLayout {
                alignment: start;
                spacing: 6px;

                if root.progress-error: Image {
                    colorize: #bc2f32;
                    height: 16px;
                    width: 16px;
                    source: @image-url("circle-error.svg");
                }
                Text {
                    text: root.progress-status;
                    color: root.progress-error ? #bc2f32 : #ffffff;
                    vertical-alignment: center;
                }
            }
        }
    }
}